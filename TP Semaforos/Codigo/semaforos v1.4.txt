#include <LiquidCrystal.h>
//////////////// DEFINES ESTADO DE SISTEMA
#define STANDBY 0x00
#define RUN 0x01
#define MODE 0x02
#define SET_TIMER 0x03
#define SET_TURN 0x04
//////////////// DEFINES BOTONES
#define NOKEY 0x00
#define SELECT 0x01
#define ENTER 0x02
#define DOWN 0x03
#define UP 0x04
#define NOKEY 0x05

//////////////// STRUCT BOTONES
struct s_status
{
    char lastKeyPressed;
    char machineState;
};
s_status status;

//////////////// FUNCIONES
char kbdManager();
void stopTraffic();
int trafficLigth(int sem1, int sem2, int sem3, int limit);
int turnSignal(int sem1, int sem2, int sem3, int giro, int limit);

//////////////// VARIABLES GLOBALES
int timer = 5000;
int turn = 3000;
int starting = 2000;
/// Semaforo 1 Doble mano s/ giro
int sem1_red = 3;
int sem1_yellow = 4;
int sem1_green = 5;
// Semafor 2 Mano lateral
int sem2_red = 6;
int sem2_yellow = 7;
int sem2_green = 8;
// Semafor 3 Doble mano c/giro
int sem3_red = 9;
int sem3_yellow = 10;
int sem3_green = 11;
int sem3_greenTurn = 12;
int sem3_redTurn = 13;
///////////////LCD DECLARADO
LiquidCrystal lcd(A0, A1, A2, A3, A4, 2);


void setup()
{ 
  Serial.begin(9600);
  lcd.begin(16, 2);
  pinMode(sem1_red, OUTPUT);
  pinMode(sem1_yellow, OUTPUT);
  pinMode(sem1_green, OUTPUT);
  pinMode(sem2_red, OUTPUT);
  pinMode(sem2_yellow, OUTPUT);
  pinMode(sem2_green, OUTPUT);
  pinMode(sem3_red, OUTPUT);
  pinMode(sem3_yellow, OUTPUT);
  pinMode(sem3_green, OUTPUT);
  pinMode(sem3_greenTurn, OUTPUT);
  pinMode(sem3_redTurn, OUTPUT);
  pinMode(A5, INPUT);
  status.machineState = STANDBY;
}

void loop()
{ 
  status.lastKeyPressed = kbdManager();
  switch(status.machineState)
  {
    case STANDBY:
    {
      Serial.println("Maquina: STANDBY");
      lcd.setCursor(0, 0);
      lcd.print("ENTER - Empezar");
      lcd.setCursor(0, 1);
      lcd.print("SELECT - Menu");
      delay(1000);
      ////////////////////////////
      if(status.lastKeyPressed == ENTER)
      {
      	status.machineState = RUN;
      }
      else if(status.lastKeyPressed == SELECT)
      {
      	status.machineState = MODE;
      }
      break;
    }
    case RUN:
  	{
      Serial.println("Maquina: RUN");
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("ENTER - Inicio");
      lcd.setCursor(0, 1);
      lcd.print("SELECT - Menu");
      delay(1000);
      //////////////////////////////////////
      trafficLigth(sem1_yellow, sem2_yellow, sem3_yellow, starting);//INICIO
      trafficLigth(sem1_red, sem2_green, sem3_red, timer);//PASO VERTICAL
      trafficLigth(sem1_yellow,sem2_yellow, sem3_yellow, timer);//ALERTA TODOS
      turnSignal(sem1_red, sem2_red, sem3_green, sem3_greenTurn, turn);//PASO GIRO 
      turnSignal(sem1_yellow, sem2_red, sem3_green, sem3_redTurn, turn);//ROJO GIRO
      trafficLigth(sem1_green, sem2_red, sem3_green, timer);//PASO DOBLE MANO
      trafficLigth(sem1_yellow,sem2_yellow, sem3_yellow, timer);//ALERTA TODOS
      ////////////////////////////
      if(status.lastKeyPressed == ENTER)
      {
      	status.machineState = STANDBY;
      }
      else if(status.lastKeyPressed == SELECT)
      {
      	status.machineState = MODE;
      }
      break;
    }
    case MODE:
  	{
      Serial.println("Maquina: MODE");
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("UP - Timer");
      lcd.setCursor(0, 1);
      lcd.print("DOWN - T.Giro");
      delay(1000);
      ///////////////////////////
      if(status.lastKeyPressed == ENTER)
      {
      	status.machineState = RUN;
      }
      else if(status.lastKeyPressed == UP)
      {
      	status.machineState = SET_TIMER;
      }
      else if(status.lastKeyPressed == DOWN)
      {
      	status.machineState = SET_TURN;
      }
      break;
    }
    case SET_TIMER:
  	{
      Serial.println("Maquina: SET_TIMER");
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("UP+2 / DOWN-2");
      lcd.setCursor(0, 1);
      lcd.print("Timer: ");
      lcd.print(timer);
      delay(1000);
      ///////////////////////////
      if(status.lastKeyPressed == ENTER)
      {
      	status.machineState = RUN;
      }
      else if(status.lastKeyPressed == SELECT)
      {
      	status.machineState = MODE;
      }
      else if(status.lastKeyPressed == UP && timer > 5000)
      {
      	timer+=2000;
      }
      else if(status.lastKeyPressed == DOWN && timer > 5000)
      {
      	timer-=2000;
      }
      break;
    }
    case SET_TURN:
  	{
      Serial.println("Maquina: SET_TURN");
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("UP+2 / DOWN-2");
      lcd.setCursor(0, 1);
      lcd.print("T.Giro: ");
      lcd.print(turn);
      delay(1000);
      ///////////////////////////
      if(status.lastKeyPressed == ENTER)
      {
      	status.machineState = RUN;
      }
      else if(status.lastKeyPressed == SELECT)
      {
      	status.machineState = MODE;
      }
      else if(status.lastKeyPressed == UP && turn > 3000)
      {
      	turn+=2000;
      }
      else if(status.lastKeyPressed == DOWN && turn > 3000)
      {
      	turn-=2000;
      }
      break;
    }
  	default:
    {
      break;
    }
  }
}   
    
int trafficLigth(int sem1, int sem2, int sem3, int limit)
{
    int auxReturn=-1;
    
    if(limit>0)
    {
      Serial.println("Dispara Traffic Light");
      digitalWrite(sem1, HIGH);
      digitalWrite(sem2, HIGH);
      digitalWrite(sem3, HIGH);
      delay(limit);
      digitalWrite(sem1, LOW);
      digitalWrite(sem2, LOW);
      digitalWrite(sem3, LOW);
      auxReturn=0;
    }
    else
    {
      Serial.println("Error. Tiempo insuficiente.");
    }
    return auxReturn;
}

int turnSignal(int sem1, int sem2, int sem3, int giro, int limit)
{
  int auxReturn=-1;
    int clock=0;
    
    if(limit>0)
    {
      Serial.println("Dispara Turn Signal");
      digitalWrite(sem1, HIGH);
      digitalWrite(sem2, HIGH);
      digitalWrite(sem3, HIGH);
      digitalWrite(giro, HIGH);
      delay(limit);
      digitalWrite(sem1, LOW);
      digitalWrite(sem2, LOW);
      digitalWrite(sem3, LOW);
      digitalWrite(giro, LOW);
      auxReturn=0;
    }
    else
    {
      Serial.println("Error. Tiempo insuficiente.");
    }
    return auxReturn;
}

void stopTraffic()
{     
  Serial.println("Dispara Stop Traffic");
  digitalWrite(sem1_green, LOW);
  digitalWrite(sem1_red ,LOW);
  digitalWrite(sem1_yellow ,LOW);
  ///////////////////////////////
  digitalWrite(sem2_red ,LOW);
  digitalWrite(sem2_yellow ,LOW);
  digitalWrite(sem2_green ,LOW);
  //////////////////////////////
  digitalWrite(sem3_red ,LOW);
  digitalWrite(sem3_yellow ,LOW);
  digitalWrite(sem3_green ,LOW);
  digitalWrite(sem3_greenTurn ,LOW);
  digitalWrite(sem3_redTurn ,LOW);
}


char kbdManager()
{
  int dato = analogRead(A5);
  if (dato > 100)
  {
    if (dato > 500 && dato < 520)
   	{
      return SELECT;
	}
    else if (dato > 330 && dato < 350)
    {
      return ENTER;
	}  
    else if (dato > 244 && dato < 264)
    {
      return UP;
	}
    else if (dato > 190 && dato < 210)
    {
      return DOWN;
  	}
  }
}